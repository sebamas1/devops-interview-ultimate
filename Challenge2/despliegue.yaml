apiVersion: v1
kind: Pod
metadata:
  name: challenge2
  labels:
    app: challenge2
spec:
  containers:
    - name: api
      image: sebastian677/django-react-craftech:latest
      env: # se puede usar kubectl create configmap backend-config --from-env-file=./path/to/.env
        - name: SQL_ENGINE
          value: "django.db.backends.postgresql"
        - name: SQL_DATABASE
          value: "core"
        - name: SQL_USER
          value: "user"
        - name: SQL_PASSWORD
          value: "password"
        - name: SQL_HOST
          value: "db-service"
        - name: SQL_PORT
          value: "5432"
      volumeMounts:
        - name: backend
          mountPath: /usr/src/app
        - name: static
          mountPath: /src/app/static
        - name: media
          mountPath: /src/app/media
      ports:
        - containerPort: 8000

    - name: react
      image: sebastian677/django-react-craftech:latests
      env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
      volumeMounts:
        - name: frontend-app
          mountPath: /usr/src/app
      ports:
        - containerPort: 3000

  volumes:
    - name: backend
      emptyDir: {}
    - name: static
      emptyDir: {}
    - name: media
      emptyDir: {}
    - name: postgres-data
      emptyDir: {}
    - name: frontend-app
      emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: challenge2-service
spec:
  type: NodePort
  selector:
    app: challenge2
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 32000
      name: frontend
    - protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 32001
      name: backend

# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-service  este servicio es para el despliegue en la nube, loadbalancer
# spec:
#   type: LoadBalancer
#   selector:
#     app: frontend
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 3000